{"ast":null,"code":"import { PieceType, TeamType, samePosition } from \"../Constants\";\nexport default class Referee {\n  tileIsOccupied(position, boardState) {\n    const piece = boardState.find(p => samePosition(p.position, position));\n    return piece ? true : false;\n  }\n  tileIsOccupiedByOpponent(position, boardState, team) {\n    const piece = boardState.find(p => samePosition(p.position, position) && p.team !== team);\n    return piece ? true : false;\n  }\n  isEnPassantMove(initialPosition, desiredPosition, type, team, boardState) {\n    const pawnDirection = team === TeamType.OUR ? 1 : -1;\n    if (type === PieceType.PAWN) {\n      if (desiredPosition.y - initialPosition.y === pawnDirection && (desiredPosition.x - initialPosition.x === -1 || desiredPosition.x - initialPosition.x === 1)) {\n        const piece = boardState.find(p => p.position.x === desiredPosition.x && p.position.y === desiredPosition.y - pawnDirection && p.enPassant);\n        return piece ? true : false;\n      }\n    }\n    return false;\n  }\n  isValidMove(initialPosition, desiredPosition, type, team, boardState) {\n    console.log(`referee checking.. piece: ${type}`);\n    //movement\n    if (type === PieceType.PAWN) {\n      const specialRow = team === TeamType.OUR ? 1 : 6;\n      const pawnDirection = team === TeamType.OUR ? 1 : -1;\n      if (initialPosition.x === desiredPosition.x && initialPosition.y === specialRow && desiredPosition.y - initialPosition.y === 2 * pawnDirection) {\n        if (!this.tileIsOccupied(desiredPosition, boardState) && !this.tileIsOccupied({\n          x: desiredPosition.x,\n          y: desiredPosition.y - pawnDirection\n        }, boardState)) {\n          return true;\n        }\n      } else if (initialPosition.x === desiredPosition.x && desiredPosition.y - initialPosition.y === pawnDirection) {\n        return !this.tileIsOccupied(desiredPosition, boardState);\n      }\n      //attack\n      else if (desiredPosition.y - initialPosition.y === pawnDirection && (desiredPosition.x - initialPosition.x === -1 || desiredPosition.x - initialPosition.x === 1)) {\n        return this.tileIsOccupiedByOpponent(desiredPosition, boardState, team);\n      }\n    } else if (type === PieceType.KNIGHT) {\n      // moving mechanics\n      // 8 different tiles possible\n\n      const knightX = [1, 2, 2, 1, -1, -2, -2, -1];\n      const knightY = [2, 1, -1, -2, -2, -1, 1, 2];\n      for (let i = 0; i < 8; i++) {\n        if (desiredPosition.x - initialPosition.x === knightX[i] && desiredPosition.y - initialPosition.y === knightY[i]) {\n          return !this.tileIsOccupied(desiredPosition, boardState) || this.tileIsOccupiedByOpponent(desiredPosition, boardState, team);\n        }\n      }\n    } else if (type === PieceType.BISHOP) {\n      if (Math.abs(desiredPosition.x - initialPosition.x + (desiredPosition.y - initialPosition.y)) % 2 === 0) {\n        return !this.tileIsOccupied(desiredPosition, boardState) || this.tileIsOccupiedByOpponent(desiredPosition, boardState, team);\n      }\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["PieceType","TeamType","samePosition","Referee","tileIsOccupied","position","boardState","piece","find","p","tileIsOccupiedByOpponent","team","isEnPassantMove","initialPosition","desiredPosition","type","pawnDirection","OUR","PAWN","y","x","enPassant","isValidMove","console","log","specialRow","KNIGHT","knightX","knightY","i","BISHOP","Math","abs"],"sources":["/home/Outer/Documents/chess-app/src/referee/Referee.ts"],"sourcesContent":["import { PieceType, TeamType, Piece, Position, samePosition} from \"../Constants\";\n\n\nexport default class Referee{\n    tileIsOccupied(position:Position, boardState: Piece[]):boolean{\n        const piece = boardState.find((p) => samePosition(p.position,position));\n        return piece?true:false;\n    }\n\n    tileIsOccupiedByOpponent(position:Position, boardState:Piece[], team:TeamType):boolean{\n        const piece = boardState.find((p)=>samePosition(p.position, position) && p.team!==team);\n        return piece?true:false;\n    }\n\n    isEnPassantMove(initialPosition: Position, desiredPosition:Position, type:PieceType, team:TeamType, boardState:Piece[]):boolean{\n        const pawnDirection = (team === TeamType.OUR)? 1:-1;\n\n        if(type===PieceType.PAWN){\n            if(desiredPosition.y-initialPosition.y===pawnDirection && ((desiredPosition.x-initialPosition.x===-1) || (desiredPosition.x-initialPosition.x===1))){\n                const piece = boardState.find((p)=> p.position.x===desiredPosition.x && (p.position.y===desiredPosition.y - pawnDirection && p.enPassant));\n\n                return piece?true:false;\n            }\n        }\n        return false;\n    }\n\n    isValidMove(initialPosition:Position, desiredPosition: Position, type:PieceType, team:TeamType, boardState:Piece[]){\n        console.log(`referee checking.. piece: ${type}`);\n        //movement\n        if(type === PieceType.PAWN){\n            const specialRow = (team === TeamType.OUR)?1:6;\n            const pawnDirection = (team === TeamType.OUR)? 1:-1;\n\n            if(initialPosition.x===desiredPosition.x && initialPosition.y===specialRow && desiredPosition.y-initialPosition.y===2*pawnDirection){\n                if(!this.tileIsOccupied(desiredPosition,boardState) && !this.tileIsOccupied({x: desiredPosition.x, y:desiredPosition.y-pawnDirection}, boardState)){\n                    return true;\n                }\n            }else if(initialPosition.x===desiredPosition.x && desiredPosition.y-initialPosition.y===pawnDirection){\n                    return !this.tileIsOccupied(desiredPosition,boardState)\n            }\n            //attack\n            else if(desiredPosition.y-initialPosition.y===pawnDirection && ((desiredPosition.x-initialPosition.x===-1) || (desiredPosition.x-initialPosition.x===1))){\n                return this.tileIsOccupiedByOpponent(desiredPosition,boardState,team);\n            }\n        } else if(type === PieceType.KNIGHT){\n            // moving mechanics\n            // 8 different tiles possible\n\n            const knightX = [1,2,2,1,-1,-2,-2,-1];\n            const knightY = [2,1,-1,-2,-2,-1,1,2];\n\n            for(let i=0;i<8;i++){\n                if((desiredPosition.x - initialPosition.x === knightX[i]) && (desiredPosition.y - initialPosition.y === knightY[i])){\n                    return (!this.tileIsOccupied(desiredPosition,boardState) || this.tileIsOccupiedByOpponent(desiredPosition,boardState, team))\n                } \n            }\n        } else if(type === PieceType.BISHOP){\n            if((Math.abs(((desiredPosition.x - initialPosition.x) + (desiredPosition.y-initialPosition.y))) % 2)===0){\n                return (!this.tileIsOccupied(desiredPosition,boardState) || this.tileIsOccupiedByOpponent(desiredPosition,boardState,team));\n            }\n        }\n\n        return false;\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
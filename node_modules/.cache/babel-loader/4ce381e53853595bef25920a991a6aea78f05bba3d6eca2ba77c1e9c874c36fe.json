{"ast":null,"code":"var _jsxFileName = \"/home/Outer/Documents/chess-app/src/components/Chessboard/Chessboard.tsx\",\n  _s = $RefreshSig$();\nimport './Chessboard.css';\nimport Tile from '../Tile/Tile';\nimport { useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst N = 8;\nconst xAxis = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\nconst yAxis = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\nconst initialBoardState = [];\nexport default function Chessboard() {\n  _s();\n  const [xAxis, setX] = useState(0);\n  const [yAxis, setY] = useState(0);\n  const [pieces, setPieces] = useState(initialBoardState);\n  const chessboardRef = useRef(null);\n  let activePiece = null;\n  useEffect(() => {\n    // black pawns\n    for (let i = 0; i < 8; i++) {\n      0;\n      initialBoardState.push({\n        image: \"assets/images/pawn_b.png\",\n        x: i,\n        y: 6\n      });\n    }\n\n    // white pawns\n    for (let i = 0; i < 8; i++) {\n      initialBoardState.push({\n        image: \"assets/images/pawn_w.png\",\n        x: i,\n        y: 1\n      });\n    }\n\n    // rest of the pieces\n    for (let p = 0; p < 2; p++) {\n      const y = p === 0 ? 7 : 0;\n      const color = y === 7 ? \"b\" : \"w\";\n      initialBoardState.push({\n        image: `assets/images/rook_${color}.png`,\n        x: 0,\n        y: y\n      });\n      initialBoardState.push({\n        image: `assets/images/knight_${color}.png`,\n        x: 1,\n        y: y\n      });\n      initialBoardState.push({\n        image: `assets/images/bishop_${color}.png`,\n        x: 2,\n        y: y\n      });\n      initialBoardState.push({\n        image: `assets/images/queen_${color}.png`,\n        x: 3,\n        y: y\n      });\n      initialBoardState.push({\n        image: `assets/images/king_${color}.png`,\n        x: 4,\n        y: y\n      });\n      initialBoardState.push({\n        image: `assets/images/bishop_${color}.png`,\n        x: 5,\n        y: y\n      });\n      initialBoardState.push({\n        image: `assets/images/knight_${color}.png`,\n        x: 6,\n        y: y\n      });\n      initialBoardState.push({\n        image: `assets/images/rook_${color}.png`,\n        x: 7,\n        y: y\n      });\n    }\n  }, []);\n  function grabPiece(e) {\n    const chessboard = chessboardRef.current;\n    const element = e.target;\n    if (element.classList.contains(\"chess-piece\") && chessboard) {\n      const xAxis = Math.abs(Math.ceil((e.clientX - chessboard.offsetLeft - 800) / 100));\n      const yAxis = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n      setX(xAxis);\n      setY(yAxis);\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      element.style.position = \"absolute\";\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      activePiece = element;\n    }\n  }\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      const minX = chessboard.offsetLeft - 25;\n      const minY = chessboard.offsetTop - 25;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 75;\n      activePiece.style.position = \"absolute\";\n\n      // x axis limits\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      } else {\n        activePiece.style.left = `${x}px`;\n      }\n\n      // y axis limits\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      } else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      } else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      // substracted 800 to align with chessboard axis (starting from bottom left)\n      const x = Math.floor((e.clientX - chessboard.offsetLeft - 800) / 100);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n      setPieces(value => {\n        const pieces = value.map(p => {\n          if (p.x === xAxis && p.y === yAxis) {\n            p.x = x;\n            p.y = y;\n          }\n          return p;\n        });\n        return pieces;\n      });\n      activePiece = null;\n    }\n  }\n  let board = [];\n  for (let y = N - 1; y >= 0; y--) {\n    for (let x = 0; x < N; x++) {\n      // check whether the sum of numbers x,y is even to draw each tile\n      const isEven = (x + y + 2) % 2 === 0;\n      let img = undefined;\n      pieces.forEach(p => {\n        if (p.x === x && p.y === y) {\n          img = p.image;\n        }\n      });\n      board.push(/*#__PURE__*/_jsxDEV(Tile, {\n        isEven: isEven,\n        image: img\n      }, `${x},${y}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onMouseMove: e => movePiece(e),\n    onMouseDown: e => grabPiece(e),\n    onMouseUp: e => dropPiece(e),\n    id: \"chessboard\",\n    ref: chessboardRef,\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 12\n  }, this);\n}\n_s(Chessboard, \"EAMY3fsIcIZjOzUr90cbEyEOWkE=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["Tile","useRef","useState","jsxDEV","_jsxDEV","N","xAxis","yAxis","initialBoardState","Chessboard","_s","setX","setY","pieces","setPieces","chessboardRef","activePiece","useEffect","i","push","image","x","y","p","color","grabPiece","e","chessboard","current","element","target","classList","contains","Math","abs","ceil","clientX","offsetLeft","clientY","offsetTop","style","position","left","top","movePiece","minX","minY","maxX","clientWidth","maxY","clientHeight","dropPiece","floor","value","map","board","isEven","img","undefined","forEach","fileName","_jsxFileName","lineNumber","columnNumber","onMouseMove","onMouseDown","onMouseUp","id","ref","children","_c","$RefreshReg$"],"sources":["/home/Outer/Documents/chess-app/src/components/Chessboard/Chessboard.tsx"],"sourcesContent":["import './Chessboard.css';\nimport Tile from '../Tile/Tile'\nimport { useRef, useState } from 'react';\n\nconst N = 8;\nconst xAxis = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"];\nconst yAxis = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"];\n\ninterface Piece{\n    image: string\n    x: number\n    y: number\n}\n\nconst initialBoardState:Piece[] = []\n\n\n\n\n\nexport default function Chessboard(){\nconst [xAxis,setX] = useState(0);\nconst [yAxis,setY] = useState(0);\nconst [pieces, setPieces] = useState<Piece[]>(initialBoardState)\nconst chessboardRef = useRef<HTMLDivElement>(null);\n\nlet activePiece: HTMLElement | null = null;\n\nuseEffect(()=>{\n// black pawns\nfor(let i=0;i<8;i++){0\n    initialBoardState.push({image:\"assets/images/pawn_b.png\",x:i , y:6})\n}\n\n// white pawns\nfor(let i=0;i<8;i++){\n    initialBoardState.push({image:\"assets/images/pawn_w.png\",x:i , y:1})\n}\n\n\n// rest of the pieces\nfor(let p=0;p<2;p++){\n    const y = (p === 0)?7:0; \n    const color = (y===7)?\"b\":\"w\";\n\n    initialBoardState.push({image:`assets/images/rook_${color}.png`,x:0 , y:y})\n    initialBoardState.push({image:`assets/images/knight_${color}.png`,x:1 , y:y})\n    initialBoardState.push({image:`assets/images/bishop_${color}.png`,x:2 , y:y})\n    initialBoardState.push({image:`assets/images/queen_${color}.png`,x:3 , y:y})\n    initialBoardState.push({image:`assets/images/king_${color}.png`,x:4 , y:y})\n    initialBoardState.push({image:`assets/images/bishop_${color}.png`,x:5 , y:y})\n    initialBoardState.push({image:`assets/images/knight_${color}.png`,x:6 , y:y})\n    initialBoardState.push({image:`assets/images/rook_${color}.png`,x:7 , y:y})\n}\n},[])\n\nfunction grabPiece(e: React.MouseEvent){\n    const chessboard = chessboardRef.current;\n    const element = e.target as HTMLElement;\n\n    if(element.classList.contains(\"chess-piece\") && chessboard){\n        const xAxis=Math.abs(Math.ceil((e.clientX - chessboard.offsetLeft -800)/100));\n        const yAxis=Math.abs(Math.ceil((e.clientY - chessboard.offsetTop -800)/100));\n        setX(xAxis);\n        setY(yAxis);\n\n\n        const x = e.clientX -50;\n        const y = e.clientY -50;\n        element.style.position=\"absolute\";\n        element.style.left = `${x}px`;\n        element.style.top = `${y}px`;\n\n        activePiece = element;\n    }\n}\n\nfunction movePiece(e: React.MouseEvent){\n    const chessboard = chessboardRef.current;\n    if(activePiece && chessboard){\n        const x = e.clientX -50;\n        const y = e.clientY -50;\n\n        const minX = chessboard.offsetLeft -25;\n        const minY = chessboard.offsetTop -25;\n        const maxX = chessboard.offsetLeft + chessboard.clientWidth -75 ;\n        const maxY = chessboard.offsetTop + chessboard.clientHeight -75;\n\n        activePiece.style.position=\"absolute\";\n\n\n        // x axis limits\n        if(x<minX){\n            activePiece.style.left = `${minX}px`;\n        } else if(x>maxX){\n            activePiece.style.left = `${maxX}px`;\n        } else{\n            activePiece.style.left = `${x}px`;\n        }\n\n        // y axis limits\n        if(y<minY){\n            activePiece.style.top = `${minY}px`;\n        } else if(y>maxY){\n            activePiece.style.top = `${maxY}px`;\n        } else{\n            activePiece.style.top = `${y}px`;\n        }\n        \n    }\n}\n\nfunction dropPiece(e: React.MouseEvent){\n    const chessboard = chessboardRef.current;\n    if(activePiece && chessboard){\n        // substracted 800 to align with chessboard axis (starting from bottom left)\n        const x=Math.floor((e.clientX - chessboard.offsetLeft -800)/100);\n        const y=Math.abs(Math.ceil((e.clientY - chessboard.offsetTop -800)/100));\n\n        setPieces(value => {\n            const pieces = value.map((p)=>{\n                if(p.x === xAxis && p.y ===yAxis){\n                    p.x=x;\n                    p.y=y;\n                }\n                return p});\n            return pieces;});\n\n        \n        activePiece = null;\n    }\n}\n\n\n\n    let board = [];\n\n    for(let y=N-1;y>=0;y--){\n        for(let x=0;x<N;x++){\n\n            // check whether the sum of numbers x,y is even to draw each tile\n            const isEven = (x+y+2)%2===0;\n            let img = undefined;\n\n            pieces.forEach(p=> {\n                if(p.x===x && p.y===y){\n                    img=p.image\n                }\n            })\n\n            \n            board.push(\n                    <Tile key={`${x},${y}`} isEven={isEven} image={img}/> \n            )\n        }\n        }       \n\n\n    return <div \n        onMouseMove={(e)=>movePiece(e)} \n        onMouseDown={e=> grabPiece(e)} \n        onMouseUp={(e)=> dropPiece(e)}\n        id=\"chessboard\"\n        ref={chessboardRef}>\n            {board}\n    </div>\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/Outer/Documents/chess-app/src/components/Chessboard/Chessboard.tsx\",\n  _s = $RefreshSig$();\nimport './Chessboard.css';\nimport Tile from '../Tile/Tile';\nimport { useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst N = 8;\nconst xAxis = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\nconst yAxis = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\nconst initialBoardState = [];\n\n// black pawns\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"assets/images/pawn_b.png\",\n    x: i,\n    y: 6\n  });\n}\n\n// white pawns\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"assets/images/pawn_w.png\",\n    x: i,\n    y: 1\n  });\n}\n\n// rest of the pieces\nfor (let p = 0; p < 2; p++) {\n  const y = p === 0 ? 7 : 0;\n  const color = y === 7 ? \"b\" : \"w\";\n  initialBoardState.push({\n    image: `assets/images/rook_${color}.png`,\n    x: 0,\n    y: y\n  });\n  initialBoardState.push({\n    image: `assets/images/knight_${color}.png`,\n    x: 1,\n    y: y\n  });\n  initialBoardState.push({\n    image: `assets/images/bishop_${color}.png`,\n    x: 2,\n    y: y\n  });\n  initialBoardState.push({\n    image: `assets/images/queen_${color}.png`,\n    x: 3,\n    y: y\n  });\n  initialBoardState.push({\n    image: `assets/images/king_${color}.png`,\n    x: 4,\n    y: y\n  });\n  initialBoardState.push({\n    image: `assets/images/bishop_${color}.png`,\n    x: 5,\n    y: y\n  });\n  initialBoardState.push({\n    image: `assets/images/knight_${color}.png`,\n    x: 6,\n    y: y\n  });\n  initialBoardState.push({\n    image: `assets/images/rook_${color}.png`,\n    x: 7,\n    y: y\n  });\n}\nexport default function Chessboard() {\n  _s();\n  const [activePiece, setActivePiece] = useState(null);\n  const [xAxis, setXAxis] = useState(0);\n  const [yAxis, setYAxis] = useState(0);\n  const [pieces, setPieces] = useState(initialBoardState);\n  const chessboardRef = useRef(null);\n  function grabPiece(e) {\n    const chessboard = chessboardRef.current;\n    const element = e.target;\n    if (element.classList.contains(\"chess-piece\") && chessboard) {\n      setXAxis(Math.floor((e.clientX - chessboard.offsetLeft) / 100));\n      setYAxis(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)));\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      element.style.position = \"absolute\";\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  }\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      const minX = chessboard.offsetLeft - 25;\n      const minY = chessboard.offsetTop - 25;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 75;\n      activePiece.style.position = \"absolute\";\n\n      // x axis limits\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      } else {\n        activePiece.style.left = `${x}px`;\n      }\n\n      // y axis limits\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      } else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      } else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      // substracted 800 to align with chessboard axis (starting from bottom left)\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n      setPieces(value => {\n        const pieces = value.map(p => {\n          if (p.x === xAxis && p.y === yAxis) {\n            p.x = x;\n            p.y = y;\n          }\n          return p;\n        });\n        return pieces;\n      });\n      setActivePiece(null);\n    }\n  }\n  let board = [];\n  for (let y = N - 1; y >= 0; y--) {\n    for (let x = 0; x < N; x++) {\n      // check whether the sum of numbers x,y is even to draw each tile\n      const isEven = (x + y + 2) % 2 === 0;\n      let img = undefined;\n      pieces.forEach(p => {\n        if (p.x === x && p.y === y) {\n          img = p.image;\n        }\n      });\n      board.push(/*#__PURE__*/_jsxDEV(Tile, {\n        isEven: isEven,\n        image: img\n      }, `${x},${y}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onMouseMove: e => movePiece(e),\n    onMouseDown: e => grabPiece(e),\n    onMouseUp: e => dropPiece(e),\n    id: \"chessboard\",\n    ref: chessboardRef,\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 12\n  }, this);\n}\n_s(Chessboard, \"xQBrAfT1m9ZNj2doAbats/XZKt4=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["Tile","useRef","useState","jsxDEV","_jsxDEV","N","xAxis","yAxis","initialBoardState","i","push","image","x","y","p","color","Chessboard","_s","activePiece","setActivePiece","setXAxis","setYAxis","pieces","setPieces","chessboardRef","grabPiece","e","chessboard","current","element","target","classList","contains","Math","floor","clientX","offsetLeft","abs","ceil","clientY","offsetTop","style","position","left","top","movePiece","minX","minY","maxX","clientWidth","maxY","clientHeight","dropPiece","value","map","board","isEven","img","undefined","forEach","fileName","_jsxFileName","lineNumber","columnNumber","onMouseMove","onMouseDown","onMouseUp","id","ref","children","_c","$RefreshReg$"],"sources":["/home/Outer/Documents/chess-app/src/components/Chessboard/Chessboard.tsx"],"sourcesContent":["import './Chessboard.css';\nimport Tile from '../Tile/Tile'\nimport { useRef, useState } from 'react';\n\nconst N = 8;\nconst xAxis = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"];\nconst yAxis = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"];\n\ninterface Piece{\n    image: string\n    x: number\n    y: number\n}\n\nconst initialBoardState: Piece[] = []\n\n// black pawns\nfor(let i=0;i<8;i++){\n    initialBoardState.push({image:\"assets/images/pawn_b.png\",x:i , y:6})\n}\n\n// white pawns\nfor(let i=0;i<8;i++){\n    initialBoardState.push({image:\"assets/images/pawn_w.png\",x:i , y:1})\n}\n\n\n// rest of the pieces\nfor(let p=0;p<2;p++){\n    const y = (p === 0)?7:0; \n    const color = (y===7)?\"b\":\"w\";\n\n    initialBoardState.push({image:`assets/images/rook_${color}.png`,x:0 , y:y})\n    initialBoardState.push({image:`assets/images/knight_${color}.png`,x:1 , y:y})\n    initialBoardState.push({image:`assets/images/bishop_${color}.png`,x:2 , y:y})\n    initialBoardState.push({image:`assets/images/queen_${color}.png`,x:3 , y:y})\n    initialBoardState.push({image:`assets/images/king_${color}.png`,x:4 , y:y})\n    initialBoardState.push({image:`assets/images/bishop_${color}.png`,x:5 , y:y})\n    initialBoardState.push({image:`assets/images/knight_${color}.png`,x:6 , y:y})\n    initialBoardState.push({image:`assets/images/rook_${color}.png`,x:7 , y:y})\n}\n\n\nexport default function Chessboard(){\nconst [activePiece, setActivePiece] = useState<HTMLElement | null>(null)\nconst [xAxis,setXAxis] = useState(0);\nconst [yAxis,setYAxis] = useState(0);\nconst [pieces, setPieces] = useState<Piece[]>(initialBoardState);\nconst chessboardRef = useRef<HTMLDivElement>(null);\n\n\nfunction grabPiece(e: React.MouseEvent){\n    const chessboard = chessboardRef.current;\n    const element = e.target as HTMLElement;\n\n    if(element.classList.contains(\"chess-piece\") && chessboard){\n        setXAxis(Math.floor((e.clientX - chessboard.offsetLeft)/100));\n        setYAxis(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800)/100)));\n\n\n        const x = e.clientX -50;\n        const y = e.clientY -50;\n        element.style.position=\"absolute\";\n        element.style.left = `${x}px`;\n        element.style.top = `${y}px`;\n\n\n\n        setActivePiece(element);\n    }\n}\n\nfunction movePiece(e: React.MouseEvent){\n    const chessboard = chessboardRef.current;\n    if(activePiece && chessboard){\n        const x = e.clientX -50;\n        const y = e.clientY -50;\n\n        const minX = chessboard.offsetLeft -25;\n        const minY = chessboard.offsetTop -25;\n        const maxX = chessboard.offsetLeft + chessboard.clientWidth -75 ;\n        const maxY = chessboard.offsetTop + chessboard.clientHeight -75;\n\n        activePiece.style.position=\"absolute\";\n\n\n        // x axis limits\n        if(x<minX){\n            activePiece.style.left = `${minX}px`;\n        } else if(x>maxX){\n            activePiece.style.left = `${maxX}px`;\n        } else{\n            activePiece.style.left = `${x}px`;\n        }\n\n        // y axis limits\n        if(y<minY){\n            activePiece.style.top = `${minY}px`;\n        } else if(y>maxY){\n            activePiece.style.top = `${maxY}px`;\n        } else{\n            activePiece.style.top = `${y}px`;\n        }\n        \n    }\n}\n\nfunction dropPiece(e: React.MouseEvent){\n    const chessboard = chessboardRef.current;\n    if(activePiece && chessboard){\n        // substracted 800 to align with chessboard axis (starting from bottom left)\n        const x=Math.floor((e.clientX - chessboard.offsetLeft)/100);\n        const y=Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800)/100));\n\n        setPieces(value => {\n            const pieces = value.map((p)=>{\n                if(p.x === xAxis && p.y ===yAxis){\n                    p.x=x;\n                    p.y=y;\n                }\n                return p});\n            return pieces;});\n\n        \n        setActivePiece(null);\n    }\n}\n\n\n\n    let board = [];\n\n    for(let y=N-1;y>=0;y--){\n        for(let x=0;x<N;x++){\n\n            // check whether the sum of numbers x,y is even to draw each tile\n            const isEven = (x+y+2)%2===0;\n            let img = undefined;\n\n            pieces.forEach(p=> {\n                if(p.x===x && p.y===y){\n                    img=p.image\n                }\n            })\n\n            \n            board.push(\n                    <Tile key={`${x},${y}`} isEven={isEven} image={img}/> \n            )\n        }\n        }       \n\n\n    return <div \n        onMouseMove={(e)=>movePiece(e)} \n        onMouseDown={e=> grabPiece(e)} \n        onMouseUp={(e)=> dropPiece(e)}\n        id=\"chessboard\"\n        ref={chessboardRef}>\n            {board}\n    </div>\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
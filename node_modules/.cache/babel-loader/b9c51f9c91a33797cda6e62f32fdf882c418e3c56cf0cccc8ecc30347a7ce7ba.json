{"ast":null,"code":"var _jsxFileName = \"/home/Outer/Documents/chess-app/src/components/Chessboard/Chessboard.tsx\",\n  _s = $RefreshSig$();\nimport './Chessboard.css';\nimport Tile from '../Tile/Tile';\nimport Referee from '../../referee/Referee';\nimport { useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst N = 8;\nconst xAxis = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\nconst yAxis = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\nexport let PieceType = /*#__PURE__*/function (PieceType) {\n  PieceType[PieceType[\"PAWN\"] = 0] = \"PAWN\";\n  PieceType[PieceType[\"BISHOP\"] = 1] = \"BISHOP\";\n  PieceType[PieceType[\"KNIGHT\"] = 2] = \"KNIGHT\";\n  PieceType[PieceType[\"ROOK\"] = 3] = \"ROOK\";\n  PieceType[PieceType[\"QUEEN\"] = 4] = \"QUEEN\";\n  PieceType[PieceType[\"KING\"] = 5] = \"KING\";\n  return PieceType;\n}({});\nexport let TeamType = /*#__PURE__*/function (TeamType) {\n  TeamType[TeamType[\"OPPONENT\"] = 0] = \"OPPONENT\";\n  TeamType[TeamType[\"OUR\"] = 1] = \"OUR\";\n  return TeamType;\n}({});\nconst initialBoardState = [];\n\n// black pawns\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"assets/images/pawn_b.png\",\n    x: i,\n    y: 6,\n    type: PieceType.PAWN,\n    team: TeamType.OPPONENT\n  });\n}\n\n// white pawns\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"assets/images/pawn_w.png\",\n    x: i,\n    y: 1,\n    type: PieceType.PAWN,\n    team: TeamType.OUR\n  });\n}\n\n// rest of the pieces\nfor (let p = 0; p < 2; p++) {\n  const teamType = p === 0 ? TeamType.OPPONENT : TeamType.OUR;\n  const y = p === 0 ? 7 : 0;\n  const color = teamType === TeamType.OPPONENT ? \"b\" : \"w\";\n  initialBoardState.push({\n    image: `assets/images/rook_${color}.png`,\n    x: 0,\n    y: y,\n    type: PieceType.ROOK,\n    team: teamType\n  });\n  initialBoardState.push({\n    image: `assets/images/knight_${color}.png`,\n    x: 1,\n    y: y,\n    type: PieceType.KNIGHT,\n    team: teamType\n  });\n  initialBoardState.push({\n    image: `assets/images/bishop_${color}.png`,\n    x: 2,\n    y: y,\n    type: PieceType.BISHOP,\n    team: teamType\n  });\n  initialBoardState.push({\n    image: `assets/images/queen_${color}.png`,\n    x: 3,\n    y: y,\n    type: PieceType.QUEEN,\n    team: teamType\n  });\n  initialBoardState.push({\n    image: `assets/images/king_${color}.png`,\n    x: 4,\n    y: y,\n    type: PieceType.KING,\n    team: teamType\n  });\n  initialBoardState.push({\n    image: `assets/images/bishop_${color}.png`,\n    x: 5,\n    y: y,\n    type: PieceType.BISHOP,\n    team: teamType\n  });\n  initialBoardState.push({\n    image: `assets/images/knight_${color}.png`,\n    x: 6,\n    y: y,\n    type: PieceType.KNIGHT,\n    team: teamType\n  });\n  initialBoardState.push({\n    image: `assets/images/rook_${color}.png`,\n    x: 7,\n    y: y,\n    type: PieceType.ROOK,\n    team: teamType\n  });\n}\nexport default function Chessboard() {\n  _s();\n  const [activePiece, setActivePiece] = useState(null);\n  const [xAxis, setXAxis] = useState(0);\n  const [yAxis, setYAxis] = useState(0);\n  const [pieces, setPieces] = useState(initialBoardState);\n  const chessboardRef = useRef(null);\n  const referee = new Referee();\n  function grabPiece(e) {\n    const chessboard = chessboardRef.current;\n    const element = e.target;\n    if (element.classList.contains(\"chess-piece\") && chessboard) {\n      setXAxis(Math.floor((e.clientX - chessboard.offsetLeft) / 100));\n      setYAxis(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)));\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      element.style.position = \"absolute\";\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  }\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      const minX = chessboard.offsetLeft - 25;\n      const minY = chessboard.offsetTop - 25;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 75;\n      activePiece.style.position = \"absolute\";\n\n      // x axis limits\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      } else {\n        activePiece.style.left = `${x}px`;\n      }\n\n      // y axis limits\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      } else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      } else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      // substracted 800 to align with chessboard axis (starting from bottom left)\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n      const currentPiece = pieces.find(p => p.x === xAxis && p.y === yAxis);\n      const attackedPiece = pieces.find(p => p.x === x && p.y === y);\n      if (currentPiece) {\n        const validMove = referee.isValidMove(xAxis, yAxis, x, y, currentPiece.type, currentPiece.team, pieces);\n        const isEnPassantMove = referee.isEnPassantMove(xAxis, yAxis, x, y, currentPiece.type, currentPiece.team, pieces);\n        const pawnDirecion = currentPiece.team === TeamType.OUR ? 1 : -1;\n        if (isEnPassantMove) {\n          const updatedPieces = pieces.reduce((results, piece) => {\n            if (piece.x === xAxis && piece.y === yAxis) {\n              piece.enPassant === false;\n              piece.x = x;\n              piece.y = y;\n              results.push(piece);\n            } else if (!(piece.x === x && piece.y === y - pawnDirecion)) {\n              if (piece.type === PieceType.PAWN) {\n                piece.enPassant = false;\n              }\n              results.push(piece);\n            }\n            return results;\n          }, []);\n          setPieces(updatedPieces);\n        } else if (validMove) {\n          const updatedPieces = pieces.reduce((results, piece) => {\n            if (piece.x === xAxis && piece.y === yAxis) {\n              if (Math.abs(yAxis - y) === 2 && piece.type === PieceType.PAWN) {\n                piece.enPassant = true;\n              }\n              piece.x = x;\n              piece.y = y;\n              results.push(piece);\n            } else if (!(piece.x === x && piece.y === y)) {\n              if (piece.type === PieceType.PAWN) {\n                piece.enPassant = false;\n              }\n              results.push(piece);\n            }\n            return results;\n          }, []);\n          setPieces(updatedPieces);\n        } else {\n          //reset piece position\n          activePiece.style.position = 'relative';\n          activePiece.style.removeProperty(\"top\");\n          activePiece.style.removeProperty(\"left\");\n        }\n      }\n      setActivePiece(null);\n    }\n  }\n  let board = [];\n  for (let y = N - 1; y >= 0; y--) {\n    for (let x = 0; x < N; x++) {\n      // check whether the sum of numbers x,y is even to draw each tile\n      const isEven = (x + y + 2) % 2 === 0;\n      let img = undefined;\n      pieces.forEach(p => {\n        if (p.x === x && p.y === y) {\n          img = p.image;\n        }\n      });\n      board.push(/*#__PURE__*/_jsxDEV(Tile, {\n        isEven: isEven,\n        image: img\n      }, `${x},${y}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 21\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onMouseMove: e => movePiece(e),\n    onMouseDown: e => grabPiece(e),\n    onMouseUp: e => dropPiece(e),\n    id: \"chessboard\",\n    ref: chessboardRef,\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 12\n  }, this);\n}\n_s(Chessboard, \"xQBrAfT1m9ZNj2doAbats/XZKt4=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["Tile","Referee","useRef","useState","jsxDEV","_jsxDEV","N","xAxis","yAxis","PieceType","TeamType","initialBoardState","i","push","image","x","y","type","PAWN","team","OPPONENT","OUR","p","teamType","color","ROOK","KNIGHT","BISHOP","QUEEN","KING","Chessboard","_s","activePiece","setActivePiece","setXAxis","setYAxis","pieces","setPieces","chessboardRef","referee","grabPiece","e","chessboard","current","element","target","classList","contains","Math","floor","clientX","offsetLeft","abs","ceil","clientY","offsetTop","style","position","left","top","movePiece","minX","minY","maxX","clientWidth","maxY","clientHeight","dropPiece","currentPiece","find","attackedPiece","validMove","isValidMove","isEnPassantMove","pawnDirecion","updatedPieces","reduce","results","piece","enPassant","removeProperty","board","isEven","img","undefined","forEach","fileName","_jsxFileName","lineNumber","columnNumber","onMouseMove","onMouseDown","onMouseUp","id","ref","children","_c","$RefreshReg$"],"sources":["/home/Outer/Documents/chess-app/src/components/Chessboard/Chessboard.tsx"],"sourcesContent":["import './Chessboard.css';\nimport Tile from '../Tile/Tile'\nimport Referee from '../../referee/Referee'\nimport { useRef, useState } from 'react';\n\nconst N = 8;\nconst xAxis = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"];\nconst yAxis = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"];\n\nexport interface Piece{\n    image: string\n    x: number\n    y: number\n    type: PieceType\n    team: TeamType\n    enPassant?:boolean\n}\n\n\nexport enum PieceType {\n    PAWN,\n    BISHOP,\n    KNIGHT,\n    ROOK,\n    QUEEN,\n    KING\n}\n\nexport enum TeamType{\n    OPPONENT,\n    OUR \n}\n\nconst initialBoardState: Piece[] = []\n\n// black pawns\nfor(let i=0;i<8;i++){\n    initialBoardState.push({image:\"assets/images/pawn_b.png\",x:i , y:6, type: PieceType.PAWN, team: TeamType.OPPONENT})\n}\n\n// white pawns\nfor(let i=0;i<8;i++){\n    initialBoardState.push({image:\"assets/images/pawn_w.png\",x:i , y:1, type: PieceType.PAWN, team: TeamType.OUR})\n}\n\n\n// rest of the pieces\nfor(let p=0;p<2;p++){\n\n    const teamType = (p===0)?TeamType.OPPONENT: TeamType.OUR;\n    const y = (p === 0)?7:0; \n    const color = (teamType===TeamType.OPPONENT)?\"b\":\"w\";\n\n    initialBoardState.push({image:`assets/images/rook_${color}.png`,x:0 , y:y, type: PieceType.ROOK, team: teamType})\n    initialBoardState.push({image:`assets/images/knight_${color}.png`,x:1 , y:y, type: PieceType.KNIGHT, team: teamType})\n    initialBoardState.push({image:`assets/images/bishop_${color}.png`,x:2 , y:y, type: PieceType.BISHOP,team: teamType})\n    initialBoardState.push({image:`assets/images/queen_${color}.png`,x:3 , y:y, type: PieceType.QUEEN,team: teamType})\n    initialBoardState.push({image:`assets/images/king_${color}.png`,x:4 , y:y, type: PieceType.KING,team: teamType})\n    initialBoardState.push({image:`assets/images/bishop_${color}.png`,x:5 , y:y, type: PieceType.BISHOP,team: teamType})\n    initialBoardState.push({image:`assets/images/knight_${color}.png`,x:6 , y:y, type: PieceType.KNIGHT, team: teamType})\n    initialBoardState.push({image:`assets/images/rook_${color}.png`,x:7 , y:y, type: PieceType.ROOK, team: teamType})\n}\n\n\nexport default function Chessboard(){\nconst [activePiece, setActivePiece] = useState<HTMLElement | null>(null)\nconst [xAxis,setXAxis] = useState(0);\nconst [yAxis,setYAxis] = useState(0);\nconst [pieces, setPieces] = useState<Piece[]>(initialBoardState);\nconst chessboardRef = useRef<HTMLDivElement>(null);\nconst referee = new Referee();\n\nfunction grabPiece(e: React.MouseEvent){\n    const chessboard = chessboardRef.current;\n    const element = e.target as HTMLElement;\n\n    if(element.classList.contains(\"chess-piece\") && chessboard){\n        setXAxis(Math.floor((e.clientX - chessboard.offsetLeft)/100));\n        setYAxis(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800)/100)));\n\n\n        const x = e.clientX -50;\n        const y = e.clientY -50;\n        element.style.position=\"absolute\";\n        element.style.left = `${x}px`;\n        element.style.top = `${y}px`;\n\n\n\n        setActivePiece(element);\n    }\n}\n\nfunction movePiece(e: React.MouseEvent){\n    const chessboard = chessboardRef.current;\n    if(activePiece && chessboard){\n        const x = e.clientX -50;\n        const y = e.clientY -50;\n\n        const minX = chessboard.offsetLeft -25;\n        const minY = chessboard.offsetTop -25;\n        const maxX = chessboard.offsetLeft + chessboard.clientWidth -75 ;\n        const maxY = chessboard.offsetTop + chessboard.clientHeight -75;\n\n        activePiece.style.position=\"absolute\";\n\n\n        // x axis limits\n        if(x<minX){\n            activePiece.style.left = `${minX}px`;\n        } else if(x>maxX){\n            activePiece.style.left = `${maxX}px`;\n        } else{\n            activePiece.style.left = `${x}px`;\n        }\n\n        // y axis limits\n        if(y<minY){\n            activePiece.style.top = `${minY}px`;\n        } else if(y>maxY){\n            activePiece.style.top = `${maxY}px`;\n        } else{\n            activePiece.style.top = `${y}px`;\n        }\n        \n    }\n}\n\nfunction dropPiece(e: React.MouseEvent){\n    const chessboard = chessboardRef.current;\n    if(activePiece && chessboard){\n        // substracted 800 to align with chessboard axis (starting from bottom left)\n        const x=Math.floor((e.clientX - chessboard.offsetLeft)/100);\n        const y=Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800)/100));\n\n        const currentPiece = pieces.find((p)=> p.x===xAxis && p.y===yAxis);\n        const attackedPiece = pieces.find((p)=> p.x===x && p.y===y);       \n        if(currentPiece){\n            const validMove = referee.isValidMove(xAxis,yAxis,x,y,currentPiece.type,currentPiece.team, pieces);\n            const isEnPassantMove = referee.isEnPassantMove(xAxis,yAxis,x,y,currentPiece.type,currentPiece.team, pieces)\n            const pawnDirecion = currentPiece.team === TeamType.OUR?1:-1;\n\n            if(isEnPassantMove){\n                const updatedPieces = pieces.reduce((results, piece)=>{\n                    if(piece.x===xAxis && piece.y===yAxis){\n                        piece.enPassant===false;\n                        piece.x=x;\n                        piece.y=y;\n                        results.push(piece);\n                    }else if(!(piece.x===x && piece.y===y - pawnDirecion)){\n                        if(piece.type===PieceType.PAWN){\n                            piece.enPassant=false;\n                        }\n                        results.push(piece);\n                    }                   \n\n\n                    return results;\n                }, [] as Piece[])\n                setPieces(updatedPieces);\n            }else if(validMove){\n                const updatedPieces = pieces.reduce((results,piece)=>{\n                    if(piece.x===xAxis && piece.y===yAxis){\n                        if(Math.abs(yAxis-y)===2 &&(piece.type===PieceType.PAWN)){\n                            piece.enPassant=true;\n                        }\n                        piece.x=x;\n                        piece.y=y;\n                        results.push(piece);\n                    }else if(!(piece.x===x && piece.y===y)){\n                        if(piece.type===PieceType.PAWN){\n                            piece.enPassant=false;\n                        }\n                        results.push(piece);\n                    }                  \n\n                    return results;\n                }, [] as Piece[])\n                setPieces(updatedPieces);\n            }else{\n                //reset piece position\n                    activePiece.style.position= 'relative';\n                    activePiece.style.removeProperty(\"top\");\n                    activePiece.style.removeProperty(\"left\");\n\n            }\n        }\n\n        \n        setActivePiece(null);\n    }\n}\n\n\n\n    let board = [];\n\n    for(let y=N-1;y>=0;y--){\n        for(let x=0;x<N;x++){\n\n            // check whether the sum of numbers x,y is even to draw each tile\n            const isEven = (x+y+2)%2===0;\n            let img = undefined;\n\n            pieces.forEach(p=> {\n                if(p.x===x && p.y===y){\n                    img=p.image\n                }\n            })\n\n            \n            board.push(\n                    <Tile key={`${x},${y}`} isEven={isEven} image={img}/> \n            )\n        }\n        }       \n\n\n    return <div \n        onMouseMove={(e)=>movePiece(e)} \n        onMouseDown={e=> grabPiece(e)} \n        onMouseUp={(e)=> dropPiece(e)}\n        id=\"chessboard\"\n        ref={chessboardRef}>\n            {board}\n    </div>\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}